version: "3"

networks:

  default:
    name: traefik-net

services:

  authelia:
    container_name: authelia
    image: authelia/authelia:4
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    environment:
      AUTHELIA_JWT_SECRET_FILE: /config/secrets/jwt
      AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE: /config/secrets/smtp
      AUTHELIA_SESSION_SECRET_FILE: /config/secrets/session
      PGID: "${PGID}"
      PUID: "${PUID}"
      TZ: "${TZ}"
    healthcheck:
      test: ["CMD-SHELL", "healthcheck.sh"]
    labels:
      traefik.enable: true
      traefik.http.middlewares.authelia.forwardauth.address: "http://authelia:9091/api/verify?rd=https://authelia.${DOMAIN}"
      traefik.http.middlewares.authelia.forwardauth.authResponseHeaders: Remote-User,Remote-Groups,Remote-Name,Remote-Email
      traefik.http.middlewares.authelia.forwardauth.trustForwardHeader: true
      traefik.http.services.authelia.loadbalancer.server.port: 9091
    volumes:
      - ./authelia:/config
      - /var/log/authelia:/config/log # mount logs for fail2ban

  docker-proxy:
    container_name: traefik-docker-proxy
    image: ghcr.io/tecnativa/docker-socket-proxy:0.1
    restart: unless-stopped
    environment:
      CONTAINERS: 1
      LOG_LEVEL: info
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  error-pages:
    image: tarampampam/error-pages:1.7.1
    container_name: traefik-error-pages
    restart: unless-stopped
    environment:
      TEMPLATE_NAME: l7-dark
    labels:
      traefik.enable: true
      traefik.http.middlewares.error-pages.errors.query: /{status}.html
      traefik.http.middlewares.error-pages.errors.service: error-pages
      traefik.http.middlewares.error-pages.errors.status: 402-599 # exclude 401 to allow authorization prompts
      traefik.http.services.error-pages.loadbalancer.server.port: 8080
      # fallback router for non-registered services
      traefik.http.routers.error-pages.middlewares: error-pages
      traefik.http.routers.error-pages.priority: 1 # lowest priority
      traefik.http.routers.error-pages.rule: HostRegexp(`{host:.+}`)

  redis:
    container_name: authelia-redis
    image: redis:6.2.1
    restart: unless-stopped
    environment:
      TZ: "${TZ}"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]

  traefik:
    container_name: traefik
    image: traefik:v2.4
    restart: unless-stopped
    depends_on:
      authelia:
        condition: service_healthy
      docker-proxy:
        condition: service_started
      error-pages:
        condition: service_started
    healthcheck:
      test: ["CMD", "traefik", "healthcheck" ]
    environment:
      # internal endpoints
      TRAEFIK_API: "true"
      TRAEFIK_API_DEBUG: "false"
      TRAEFIK_PING: "true"
      # metrics
      TRAEFIK_ENTRYPOINTS_METRICS_ADDRESS: :8082
      TRAEFIK_METRICS_PROMETHEUS_ADDENTRYPOINTSLABELS: "true"
      TRAEFIK_METRICS_PROMETHEUS_ADDSERVICESLABELS: "true"
      TRAEFIK_METRICS_PROMETHEUS_ENTRYPOINT: metrics
      # logging
      TRAEFIK_ACCESSLOG_FILEPATH: /var/log/access.log
      TRAEFIK_LOG_LEVEL: info
      # redirect HTTP (web) entrypoint to HTTPS (websecure) entrypoint
      TRAEFIK_ENTRYPOINTS_WEB_ADDRESS: :80
      TRAEFIK_ENTRYPOINTS_WEB_HTTP_REDIRECTIONS_ENTRYPOINT_PERMANENT: "true"
      TRAEFIK_ENTRYPOINTS_WEB_HTTP_REDIRECTIONS_ENTRYPOINT_SCHEME: https
      TRAEFIK_ENTRYPOINTS_WEB_HTTP_REDIRECTIONS_ENTRYPOINT_TO: websecure
      # wildcard certificate for websecure entrypoint
      TRAEFIK_ENTRYPOINTS_WEBSECURE_ADDRESS: :443
      TRAEFIK_ENTRYPOINTS_WEBSECURE_HTTP_TLS_CERTRESOLVER: letsencrypt
      TRAEFIK_ENTRYPOINTS_WEBSECURE_HTTP_TLS_DOMAINS[0]_MAIN: "${DOMAIN}"
      TRAEFIK_ENTRYPOINTS_WEBSECURE_HTTP_TLS_DOMAINS[0]_SANS: "*.${DOMAIN}"
      # Letsencrypt certificates
      NAMECHEAP_API_KEY: "${NAMECHEAP_API_KEY}"
      NAMECHEAP_API_USER: "${NAMECHEAP_API_USER}"
      TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_DNSCHALLENGE_PROVIDER: namecheap
      TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_EMAIL: "${ACME_EMAIL}"
      TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_STORAGE: /letsencrypt/acme.json
      # wireguard vpn entrypoint
      TRAEFIK_ENTRYPOINTS_WIREGUARD_ADDRESS: :51820/udp
      # docker provider
      TRAEFIK_PROVIDERS_DOCKER_DEFAULTRULE: Host(`{{ index .Labels "com.docker.compose.service" }}.${DOMAIN}`)
      TRAEFIK_PROVIDERS_DOCKER_ENDPOINT: tcp://traefik-docker-proxy:2375
      TRAEFIK_PROVIDERS_DOCKER_EXPOSEDBYDEFAULT: "false"
      TRAEFIK_PROVIDERS_DOCKER_NETWORK: traefik-net
      TRAEFIK_PROVIDERS_DOCKER_WATCH: "true"
      # file provider
      DOMAIN: "${DOMAIN}"
      QNAP_IP: "${QNAP_IP}"
      TRAEFIK_PROVIDERS_FILE_DIRECTORY: /dynamic
      TRAEFIK_PROVIDERS_FILE_WATCH: "true"
      # consul provider
      # TRAEFIK_PROVIDERS_CONSUL_ENDPOINTS: 127.0.0.1:8500
      # TRAEFIK_PROVIDERS_CONSUL_PASSWORD:
      # TRAEFIK_PROVIDERS_CONSUL_USERNAME:
      # TRAEFIK_PROVIDERS_CONSULCATALOG_ENDPOINT_ADDRESS: 127.0.0.1:8500
    labels:
      traefik.enable: true
      # dashboard
      traefik.http.routers.dashboard.middlewares: authelia, whitelist-lan@file
      traefik.http.routers.dashboard.rule: "Host(`traefik.${DOMAIN}`)"
      traefik.http.routers.dashboard.service: api@internal
      # ping endpoint (don't create a local CNAME for this)
      # external access at https://ping.${DOMAIN}
      # internal access at http://traefik:8080/ping
      traefik.http.middlewares.add-ping.addprefix.prefix: /ping
      traefik.http.routers.ping.middlewares: add-ping
      traefik.http.routers.ping.rule: "Host(`ping.${DOMAIN}`)"
      traefik.http.routers.ping.service: ping@internal
    ports:
      - 80:80
      - 443:443
      - 51820:51820/udp
    volumes:
      - ./dynamic:/dynamic
      - ./letsencrypt:/letsencrypt
      - /var/log/traefik:/var/log # mount logs for fail2ban
